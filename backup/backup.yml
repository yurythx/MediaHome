# =========================================================
# SISTEMA DE BACKUP AUTOMATIZADO - PROJETO MEDIAHOME
# =========================================================
# Descri√ß√£o: Sistema de backup di√°rio automatizado para configura√ß√µes
#            e dados do projeto MediaHome (Jellyfin, Komga, Navidrome, Samba)
# Frequ√™ncia: Di√°ria (24h)
# Reten√ß√£o: 30 dias
# Formato: .tar.gz compactado
# Localiza√ß√£o: /mnt/backup/
# Conte√∫do: Configura√ß√µes dos servi√ßos MediaHome
# =========================================================

services:
  backup-mediahome:
    image: alpine:latest
    container_name: backup-configs
    restart: unless-stopped
    
    # Configura√ß√µes de timezone
    environment:
      - TZ=America/Sao_Paulo
      - BACKUP_INTERVAL=86400  # 24 horas em segundos
      - BACKUP_RETENTION=30    # Manter backups por 30 dias
      - PROJECT_NAME=mediahome
      - BACKUP_PREFIX=mediahome_config
    
    # Mapeamento de volumes
    volumes:
      - /mnt/config:/backup/source:ro
      - /mnt/backup:/backup/destination
    
    # Health check padronizado
    healthcheck:
      test: ["CMD", "sh", "-c", "find /backup/destination -name 'mediahome_config_*.tar.gz' -mtime -2 | grep -q ."]
      interval: 1h
      timeout: 30s
      retries: 3
      start_period: 5m
    
    # Comando de inicializa√ß√£o
    command: >
      sh -c "
        echo '=== SISTEMA DE BACKUP MEDIAHOME INICIADO ===' &&
        echo 'Projeto: MediaHome (Jellyfin + Komga + Navidrome + Samba)' &&
        echo 'Frequ√™ncia: Di√°ria (24h)' &&
        echo 'Reten√ß√£o: 30 dias' &&
        echo 'Destino: /mnt/backup/' &&
        echo '====================================================' &&
        
        # Instalar depend√™ncias
        apk add --no-cache tar gzip coreutils findutils &&
        
        # Criar diret√≥rio de backup se n√£o existir
        mkdir -p /backup/destination &&
        
        # Loop infinito para backups peri√≥dicos
        while true; do
          echo '' &&
          echo '[$(date)] === INICIANDO BACKUP MEDIAHOME ===' &&
          
          # Definir nome do arquivo de backup
          BACKUP_DATE=$(date +%Y%m%d_%H%M%S) &&
          BACKUP_FILE=\"$${BACKUP_PREFIX}_$${BACKUP_DATE}.tar.gz\" &&
          BACKUP_PATH=\"/backup/destination/$${BACKUP_FILE}\" &&
          
          echo '[$(date)] Criando backup: $${BACKUP_FILE}' &&
          
          # Criar backup compactado das configura√ß√µes
          cd /backup/source &&
          if [ -d . ] && [ \"$(ls -A .)\" ]; then
            tar -czf \"$${BACKUP_PATH}\" . 2>/dev/null &&
            echo '[$(date)] ‚úÖ Backup das configura√ß√µes criado com sucesso!'
          else
            echo '[$(date)] ‚ö†Ô∏è AVISO: Diret√≥rio de configura√ß√µes vazio. Criando backup vazio...' &&
            tar -czf \"$${BACKUP_PATH}\" --files-from /dev/null 2>/dev/null &&
            echo '[$(date)] ‚ÑπÔ∏è Backup vazio criado (configura√ß√µes n√£o dispon√≠veis)'
          fi &&
          
          # Verificar se o backup foi criado com sucesso
          if [ -f \"$${BACKUP_PATH}\" ]; then
            BACKUP_SIZE=$(du -h \"$${BACKUP_PATH}\" | cut -f1) &&
            echo '[$(date)] ‚úÖ Backup criado com sucesso!' &&
            echo '[$(date)] üìÅ Arquivo: $${BACKUP_FILE}' &&
            echo '[$(date)] üìä Tamanho: $${BACKUP_SIZE}' &&
            
            # Verificar integridade do backup
            echo '[$(date)] üîç Verificando integridade...' &&
            if tar -tzf \"$${BACKUP_PATH}\" >/dev/null 2>&1; then
              echo '[$(date)] ‚úÖ Integridade verificada com sucesso!' &&
              
              # Remover backups antigos (manter apenas os √∫ltimos 30 dias)
              echo '[$(date)] üßπ Removendo backups antigos...' &&
              find /backup/destination -name \"$${BACKUP_PREFIX}_*.tar.gz\" -type f -mtime +$${BACKUP_RETENTION} -delete &&
              
              # Contar backups restantes
              BACKUP_COUNT=$(find /backup/destination -name \"$${BACKUP_PREFIX}_*.tar.gz\" -type f | wc -l) &&
              echo '[$(date)] üìà Total de backups mantidos: $${BACKUP_COUNT}' &&
              echo '[$(date)] ‚úÖ Backup conclu√≠do com sucesso!' &&
              echo '[$(date)] ‚è∞ Pr√≥ximo backup em: $${BACKUP_INTERVAL} segundos (24h)'
            else
              echo '[$(date)] ‚ùå ERRO: Backup corrompido detectado!' &&
              rm -f \"$${BACKUP_PATH}\" &&
              echo '[$(date)] üóëÔ∏è Backup corrompido removido'
            fi
          else
            echo '[$(date)] ‚ùå ERRO: Falha ao criar backup!'
          fi &&
          
          echo '[$(date)] === BACKUP MEDIAHOME FINALIZADO ===' &&
          echo '' &&
            
          
          # Aguardar pr√≥ximo ciclo
          sleep $${BACKUP_INTERVAL}
        done
      "
    
    # Rede compartilhada
    networks:
      - mediahome
    
    # Labels para organiza√ß√£o
    labels:
      - "com.projeto.mediahome.backup=true"
      - "com.projeto.mediahome.service=backup"
      - "com.projeto.mediahome.version=1.0"

networks:
  mediahome:
    driver: bridge

# =========================================================
# CONFIGURA√á√ïES DE BACKUP:
# =========================================================
# - Execu√ß√£o: A cada 24 horas (configur√°vel via BACKUP_INTERVAL)
# - Reten√ß√£o: 30 dias (configur√°vel via BACKUP_RETENTION)
# - Logs: Detalhados com timestamps no formato [$(date)]
# - Health Check: Monitora backups criados nas √∫ltimas 48h
# - Integridade: Verifica cada backup criado
# - Labels: Organizacionais para identifica√ß√£o do servi√ßo
# =========================================================